// IMPORTANT: you must include the following line in all your C files
#include <lcom/lcf.h>

#include <lcom/lab5.h>

//#include <lcom/vbe.h>

#include <lcom/video_gr.h>

//#include <liblm.h>

#include <stdint.h>
#include <stdio.h>

#include "kbd.h"
#include "i8042.h"

// Any header files included below this line should have been created by you

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need it]
  lcf_trace_calls("/home/lcom/labs/lab5/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab5/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int (video_test_init)(uint16_t mode, uint8_t delay) {
  /* To be completed */
  //printf("%s(0x%03x, %u): under construction\n", __func__, mode, delay);
  
  char *vm = (char*)vg_init(mode);
  
  sleep(delay);
  
  vg_exit();
  
  printf("%x\n",vm);

  return 1;
}	

int (video_test_rectangle)(uint16_t mode, uint16_t x, uint16_t y,
                       uint16_t width, uint16_t height, uint32_t color) {
  /* To be completed */
  printf("%s(0x%03X, %u, %u, %u, %u, 0x%08x): under construction\n",
         __func__, mode, x, y, width, height, color);
         
  int estado;
  uint8_t bit_no;
  message msg;
  bool running = true;

  if (kbd_subscribe_int(&bit_no) != 0)
  {
    printf("kbd_subscribe_int(34): Couldn't subscribe to keyboard interrupts\n");
    return 1;
  };
         
  char *vm = (char*)vg_init(mode);
  
  vg_draw_rectangle(x, y, width, height, color);

  while (running)
  {
    driver_receive(ANY, &msg, &estado);
    if (is_ipc_notify(estado))
    {
      switch (_ENDPOINT_P(msg.m_source))
      {
      case HARDWARE:
        if (msg.m_notify.interrupts & bit_no)
        {
          kbc_ih();
          bool msb = (kbc_code & BIT(7)) ? true : false;

          uint8_t kbc_code_bytes[3];

          kbc_code_bytes[0] = (kbc_code >> 0) & 0xFF;
          kbc_code_bytes[1] = (kbc_code >> 8) & 0xFF;
          kbc_code_bytes[2] = (kbc_code >> 16) & 0xFF;

          kbd_print_scancode(msb, 1, kbc_code_bytes);
          if (kbc_code_bytes[0] == ESC_BREAK)
          { //Exists upon the release of ESC key
            running = false;
          }
        }
        break;
      default:
        break;
      }
    }
  }

  if (kbd_unsubscribe_int() != 0)
    return 2;
  
  vg_exit();
  
  printf("%x\n",vm);

  return 1;
}

int (video_test_pattern)(uint16_t mode, uint8_t no_rectangles, uint32_t first, uint8_t step) {
  /* To be completed */
  printf("%s(0x%03x, %u, 0x%08x, %d): under construction\n", __func__, mode, no_rectangles, first, step);

  return 1;
}

int (video_test_xpm)(const char *xpm[], uint16_t x, uint16_t y) {
  /* To be completed */
  printf("%s(%8p, %u, %u): under construction\n", __func__, xpm, x, y);

  return 1;
}

int (video_test_move)(const char *xpm[], uint16_t xi, uint16_t yi, uint16_t xf, uint16_t yf, int16_t speed, uint8_t fr_rate) {
  /* To be completed */
  printf("%s(%8p, %u, %u, %u, %u, %d, %u): under construction\n", __func__, xpm, xi, yi, xf, yf, speed, fr_rate);

  return 1;
}

int (video_test_controller)() {
  /* To be completed */
  printf("%s(): under construction\n", __func__);

  return 1;
}  

