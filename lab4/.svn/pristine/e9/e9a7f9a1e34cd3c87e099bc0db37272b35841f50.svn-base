// IMPORTANT: you must include the following line in all your C files
#include "i8254.h"
#include <lcom/lcf.h>
#include <stdint.h>
#include <stdio.h>
#include "mouse.h"

// Any header files included below this line should have been created by you

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't wan(uint8_t *bit_no)t/need/ it]
  lcf_trace_calls("/home/lcom/labs/lab4/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab4/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int(mouse_test_packet)(uint32_t cnt) {
  int estado;
  uint32_t internal_counter = 0;
  message msg;
  uint8_t bit_no;
  unsigned short code;

  mouse_enable_data_reporting();

  if (mouse_subscribe(&bit_no) != 0) {
    printf("mouse_test_packet(44): Couldn't subscribe to mouse\n");
    return 1;
  };

  if (mouse_enable_packets() != 0) {
    printf("test_packet: failed to enable packets.\n");
    mouse_unsubscribe();
    return -1;
  }

  while (internal_counter <= cnt) {
    if (driver_receive(ANY, &msg, &estado) != 0) {
      printf("test_packet: driver_receive failed.\n");
      continue;
    }

    while (running) {
      driver_receive(ANY, &msg, &estado);
      if (is_ipc_notify(state)) {
        switch (_ENDPOINT_P(msg.m_source)) {
          case HARDWARE:
            if (msg.m_notify.interrupts & bit_no) {
              mouse_ih();
              //packet[counter] = mouse_int_handler();
              if (counter == -1)
                break;
              counter++;

              if (counter > 2) {
                struct packet pp;

                pp.bytes = paux->bytes;
                pp.rb = paux->rb;
                pp.mb = paux->mb;
                pp.lb = paux->lb;
                pp.delta_x = paux->delta_x;
                pp.delta_y = paux->delta_y;
                pp.x_ov = paux->x_ov;
                pp.y_ov = paux->y_ov;

                mouse_print_packet(&pp);
                internal_counter++;
                counter = 0;
              }
            }
            break;
          default:
            break;
        }
      }
    }
  }
  if (mouse_disable_packets() != 0) {
    printf("test_packet: failed to disable packets.\n");
  }
  if (mouse_unsubscribe() != 0) {
    printf("test_packet: mouse_unsubcribe failed.\n");
    return -1;
  }
  return 0;
}

int(mouse_test_remote)(uint16_t period, uint8_t cnt) {
  /* To be completed */
  printf("%s(%u, %u): under construction\n", __func__, period, cnt);
  return 1;
}

int(mouse_test_async)(uint8_t idle_time) {
  /* To be completed */
  printf("%s(%u): under construction\n", __func__, idle_time);
  return 1;
}

int(mouse_test_gesture)(uint8_t UNUSED(x_len), uint8_t UNUSED(tolerance) {
  /* To be completed */
  printf("%s: under construction\n", __func__);
  return 1;
}
